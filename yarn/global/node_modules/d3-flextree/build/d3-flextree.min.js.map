{"version":3,"file":"d3-flextree.min.js","sources":["../node_modules/d3-hierarchy/src/hierarchy/count.js","../node_modules/d3-hierarchy/src/hierarchy/index.js","../node_modules/d3-hierarchy/src/hierarchy/each.js","../node_modules/d3-hierarchy/src/hierarchy/eachAfter.js","../node_modules/d3-hierarchy/src/hierarchy/eachBefore.js","../node_modules/d3-hierarchy/src/hierarchy/sum.js","../node_modules/d3-hierarchy/src/hierarchy/sort.js","../node_modules/d3-hierarchy/src/hierarchy/path.js","../node_modules/d3-hierarchy/src/hierarchy/ancestors.js","../node_modules/d3-hierarchy/src/hierarchy/descendants.js","../node_modules/d3-hierarchy/src/hierarchy/leaves.js","../node_modules/d3-hierarchy/src/hierarchy/links.js","../src/flextree.js"],"sourcesContent":["function count(node) {\n  var sum = 0,\n      children = node.children,\n      i = children && children.length;\n  if (!i) sum = 1;\n  else while (--i >= 0) sum += children[i].value;\n  node.value = sum;\n}\n\nexport default function() {\n  return this.eachAfter(count);\n}\n","import node_count from \"./count\";\nimport node_each from \"./each\";\nimport node_eachBefore from \"./eachBefore\";\nimport node_eachAfter from \"./eachAfter\";\nimport node_sum from \"./sum\";\nimport node_sort from \"./sort\";\nimport node_path from \"./path\";\nimport node_ancestors from \"./ancestors\";\nimport node_descendants from \"./descendants\";\nimport node_leaves from \"./leaves\";\nimport node_links from \"./links\";\n\nexport default function hierarchy(data, children) {\n  var root = new Node(data),\n      valued = +data.value && (root.value = data.value),\n      node,\n      nodes = [root],\n      child,\n      childs,\n      i,\n      n;\n\n  if (children == null) children = defaultChildren;\n\n  while (node = nodes.pop()) {\n    if (valued) node.value = +node.data.value;\n    if ((childs = children(node.data)) && (n = childs.length)) {\n      node.children = new Array(n);\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = node.children[i] = new Node(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction node_copy() {\n  return hierarchy(this).eachBefore(copyData);\n}\n\nfunction defaultChildren(d) {\n  return d.children;\n}\n\nfunction copyData(node) {\n  node.data = node.data.data;\n}\n\nexport function computeHeight(node) {\n  var height = 0;\n  do node.height = height;\n  while ((node = node.parent) && (node.height < ++height));\n}\n\nexport function Node(data) {\n  this.data = data;\n  this.depth =\n  this.height = 0;\n  this.parent = null;\n}\n\nNode.prototype = hierarchy.prototype = {\n  constructor: Node,\n  count: node_count,\n  each: node_each,\n  eachAfter: node_eachAfter,\n  eachBefore: node_eachBefore,\n  sum: node_sum,\n  sort: node_sort,\n  path: node_path,\n  ancestors: node_ancestors,\n  descendants: node_descendants,\n  leaves: node_leaves,\n  links: node_links,\n  copy: node_copy\n};\n","export default function(callback) {\n  var node = this, current, next = [node], children, i, n;\n  do {\n    current = next.reverse(), next = [];\n    while (node = current.pop()) {\n      callback(node), children = node.children;\n      if (children) for (i = 0, n = children.length; i < n; ++i) {\n        next.push(children[i]);\n      }\n    }\n  } while (next.length);\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], next = [], children, i, n;\n  while (node = nodes.pop()) {\n    next.push(node), children = node.children;\n    if (children) for (i = 0, n = children.length; i < n; ++i) {\n      nodes.push(children[i]);\n    }\n  }\n  while (node = next.pop()) {\n    callback(node);\n  }\n  return this;\n}\n","export default function(callback) {\n  var node = this, nodes = [node], children, i;\n  while (node = nodes.pop()) {\n    callback(node), children = node.children;\n    if (children) for (i = children.length - 1; i >= 0; --i) {\n      nodes.push(children[i]);\n    }\n  }\n  return this;\n}\n","export default function(value) {\n  return this.eachAfter(function(node) {\n    var sum = +value(node.data) || 0,\n        children = node.children,\n        i = children && children.length;\n    while (--i >= 0) sum += children[i].value;\n    node.value = sum;\n  });\n}\n","export default function(compare) {\n  return this.eachBefore(function(node) {\n    if (node.children) {\n      node.children.sort(compare);\n    }\n  });\n}\n","export default function(end) {\n  var start = this,\n      ancestor = leastCommonAncestor(start, end),\n      nodes = [start];\n  while (start !== ancestor) {\n    start = start.parent;\n    nodes.push(start);\n  }\n  var k = nodes.length;\n  while (end !== ancestor) {\n    nodes.splice(k, 0, end);\n    end = end.parent;\n  }\n  return nodes;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (a === b) return a;\n  var aNodes = a.ancestors(),\n      bNodes = b.ancestors(),\n      c = null;\n  a = aNodes.pop();\n  b = bNodes.pop();\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n  return c;\n}\n","export default function() {\n  var node = this, nodes = [node];\n  while (node = node.parent) {\n    nodes.push(node);\n  }\n  return nodes;\n}\n","export default function() {\n  var nodes = [];\n  this.each(function(node) {\n    nodes.push(node);\n  });\n  return nodes;\n}\n","export default function() {\n  var leaves = [];\n  this.eachBefore(function(node) {\n    if (!node.children) {\n      leaves.push(node);\n    }\n  });\n  return leaves;\n}\n","export default function() {\n  var root = this, links = [];\n  root.each(function(node) {\n    if (node !== root) { // Don’t include the root’s parent, if any.\n      links.push({source: node.parent, target: node});\n    }\n  });\n  return links;\n}\n","import {hierarchy} from 'd3-hierarchy';\nimport packageInfo from '../package.json';\n\nconst {version} = packageInfo;\nconst defaults = Object.freeze({\n  children: data => data.children,\n  nodeSize: node => node.data.size,\n  spacing: 0,\n});\n\n// Create a layout function with customizable options. Per D3-style, the\n// options can be set at any time using setter methods. The layout function\n// will compute the tree node positions based on the options in effect at the\n// time it is called.\nexport default function flextree(options) {\n  const opts = Object.assign({}, defaults, options);\n  function accessor(name) {\n    const opt = opts[name];\n    return typeof opt === 'function' ? opt : () => opt;\n  }\n\n  function layout(tree) {\n    const wtree = wrap(getWrapper(), tree, node=>node.children);\n    wtree.update();\n    return wtree.data;\n  }\n\n  function getFlexNode() {\n    const nodeSize = accessor('nodeSize');\n    const spacing = accessor('spacing');\n    return class FlexNode extends hierarchy.prototype.constructor {\n      constructor(data) {\n        super(data);\n      }\n      copy() {\n        const c = wrap(this.constructor, this, node=>node.children);\n        c.each(node => node.data = node.data.data);\n        return c;\n      }\n      get size() { return nodeSize(this); }\n      spacing(oNode) { return spacing(this, oNode); }\n      get nodes() { return this.descendants(); }\n      get xSize() { return this.size[0]; }\n      get ySize() { return this.size[1]; }\n      get top() { return this.y; }\n      get bottom() { return this.y + this.ySize; }\n      get left() { return this.x - this.xSize / 2; }\n      get right() { return this.x + this.xSize / 2; }\n      get root() {\n        const ancs = this.ancestors();\n        return ancs[ancs.length - 1];\n      }\n      get numChildren() {\n        return this.hasChildren ? this.children.length : 0;\n      }\n      get hasChildren() { return !this.noChildren; }\n      get noChildren() { return this.children === null; }\n      get firstChild() {\n        return this.hasChildren ? this.children[0] : null;\n      }\n      get lastChild() {\n        return this.hasChildren ? this.children[this.numChildren - 1] : null;\n      }\n      get extents() {\n        return (this.children || []).reduce(\n          (acc, kid) => FlexNode.maxExtents(acc, kid.extents),\n          this.nodeExtents);\n      }\n      get nodeExtents() {\n        return {\n          top: this.top,\n          bottom: this.bottom,\n          left: this.left,\n          right: this.right,\n        };\n      }\n      static maxExtents(e0, e1) {\n        return {\n          top: Math.min(e0.top, e1.top),\n          bottom: Math.max(e0.bottom, e1.bottom),\n          left: Math.min(e0.left, e1.left),\n          right: Math.max(e0.right, e1.right),\n        };\n      }\n    };\n  }\n\n  function getWrapper() {\n    const FlexNode = getFlexNode();\n    const nodeSize = accessor('nodeSize');\n    const spacing = accessor('spacing');\n    return class extends FlexNode {\n      constructor(data) {\n        super(data);\n        Object.assign(this, {\n          x: 0, y: 0,\n          relX: 0, prelim: 0, shift: 0, change: 0,\n          lExt: this, lExtRelX: 0, lThr: null,\n          rExt: this, rExtRelX: 0, rThr: null,\n        });\n      }\n      get size() { return nodeSize(this.data); }\n      spacing(oNode) { return spacing(this.data, oNode.data); }\n      get x() { return this.data.x; }\n      set x(v) { this.data.x = v; }\n      get y() { return this.data.y; }\n      set y(v) { this.data.y = v; }\n      update() {\n        layoutChildren(this);\n        resolveX(this);\n        return this;\n      }\n    };\n  }\n\n  function wrap(FlexClass, treeData, children) {\n    const _wrap = (data, parent) => {\n      const node = new FlexClass(data);\n      Object.assign(node, {\n        parent,\n        depth: parent === null ? 0 : parent.depth + 1,\n        height: 0,\n        length: 1,\n      });\n      const kidsData = children(data) || [];\n      node.children = kidsData.length === 0 ? null\n        : kidsData.map(kd => _wrap(kd, node));\n      if (node.children) {\n        Object.assign(node, node.children.reduce(\n          (hl, kid) => ({\n            height: Math.max(hl.height, kid.height + 1),\n            length: hl.length + kid.length,\n          }), node\n        ));\n      }\n      return node;\n    };\n    return _wrap(treeData, null);\n  }\n\n\n  Object.assign(layout, {\n    nodeSize(arg) {\n      return arguments.length ? (opts.nodeSize = arg, layout) : opts.nodeSize;\n    },\n    spacing(arg) {\n      return arguments.length ? (opts.spacing = arg, layout) : opts.spacing;\n    },\n    children(arg) {\n      return arguments.length ? (opts.children = arg, layout) : opts.children;\n    },\n    hierarchy(treeData, children) {\n      const kids = typeof children === 'undefined' ? opts.children : children;\n      return wrap(getFlexNode(), treeData, kids);\n    },\n    dump(tree) {\n      const nodeSize = accessor('nodeSize');\n      const _dump = i0 => node => {\n        const i1 = i0 + '  ';\n        const i2 = i0 + '    ';\n        const {x, y} = node;\n        const size = nodeSize(node);\n        const kids = (node.children || []);\n        const kdumps = (kids.length === 0) ? ' ' :\n          `,${i1}children: [${i2}${kids.map(_dump(i2)).join(i2)}${i1}],${i0}`;\n        return `{ size: [${size.join(', ')}],${i1}x: ${x}, y: ${y}${kdumps}},`;\n      };\n      return _dump('\\n')(tree);\n    },\n  });\n  return layout;\n}\nflextree.version = version;\n\nconst layoutChildren = (w, y = 0) => {\n  w.y = y;\n  (w.children || []).reduce((acc, kid) => {\n    const [i, lastLows] = acc;\n    layoutChildren(kid, w.y + w.ySize);\n    // The lowest vertical coordinate while extreme nodes still point\n    // in current subtree.\n    const lowY = (i === 0 ? kid.lExt : kid.rExt).bottom;\n    if (i !== 0) separate(w, i, lastLows);\n    const lows = updateLows(lowY, i, lastLows);\n    return [i + 1, lows];\n  }, [0, null]);\n  shiftChange(w);\n  positionRoot(w);\n  return w;\n};\n\n// Resolves the relative coordinate properties - relX and prelim --\n// to set the final, absolute x coordinate for each node. This also sets\n// `prelim` to 0, so that `relX` for each node is its x-coordinate relative\n// to its parent.\nconst resolveX = (w, prevSum, parentX) => {\n  // A call to resolveX without arguments is assumed to be for the root of\n  // the tree. This will set the root's x-coord to zero.\n  if (typeof prevSum === 'undefined') {\n    prevSum = -w.relX - w.prelim;\n    parentX = 0;\n  }\n  const sum = prevSum + w.relX;\n  w.relX = sum + w.prelim - parentX;\n  w.prelim = 0;\n  w.x = parentX + w.relX;\n  (w.children || []).forEach(k => resolveX(k, sum, w.x));\n  return w;\n};\n\n// Process shift and change for all children, to add intermediate spacing to\n// each child's modifier.\nconst shiftChange = w => {\n  (w.children || []).reduce((acc, child) => {\n    const [lastShiftSum, lastChangeSum] = acc;\n    const shiftSum = lastShiftSum + child.shift;\n    const changeSum = lastChangeSum + shiftSum + child.change;\n    child.relX += changeSum;\n    return [shiftSum, changeSum];\n  }, [0, 0]);\n};\n\n// Separates the latest child from its previous sibling\n/* eslint-disable complexity */\nconst separate = (w, i, lows) => {\n  const lSib = w.children[i - 1];\n  const curSubtree = w.children[i];\n  let rContour = lSib;\n  let rSumMods = lSib.relX;\n  let lContour = curSubtree;\n  let lSumMods = curSubtree.relX;\n  let isFirst = true;\n  while (rContour && lContour) {\n    if (rContour.bottom > lows.lowY) lows = lows.next;\n    // How far to the left of the right side of rContour is the left side\n    // of lContour? First compute the center-to-center distance, then add\n    // the \"spacing\"\n    const dist =\n      (rSumMods + rContour.prelim) - (lSumMods + lContour.prelim) +\n      rContour.xSize / 2 + lContour.xSize / 2 +\n      rContour.spacing(lContour);\n    if (dist > 0 || (dist < 0 && isFirst)) {\n      lSumMods += dist;\n      // Move subtree by changing relX.\n      moveSubtree(curSubtree, dist);\n      distributeExtra(w, i, lows.index, dist);\n    }\n    isFirst = false;\n    // Advance highest node(s) and sum(s) of modifiers\n    const rightBottom = rContour.bottom;\n    const leftBottom = lContour.bottom;\n    if (rightBottom <= leftBottom) {\n      rContour = nextRContour(rContour);\n      if (rContour) rSumMods += rContour.relX;\n    }\n    if (rightBottom >= leftBottom) {\n      lContour = nextLContour(lContour);\n      if (lContour) lSumMods += lContour.relX;\n    }\n  }\n  // Set threads and update extreme nodes. In the first case, the\n  // current subtree is taller than the left siblings.\n  if (!rContour && lContour) setLThr(w, i, lContour, lSumMods);\n  // In the next case, the left siblings are taller than the current subtree\n  else if (rContour && !lContour) setRThr(w, i, rContour, rSumMods);\n};\n/* eslint-enable complexity */\n\n// Move subtree by changing relX.\nconst moveSubtree = (subtree, distance) => {\n  subtree.relX += distance;\n  subtree.lExtRelX += distance;\n  subtree.rExtRelX += distance;\n};\n\nconst distributeExtra = (w, curSubtreeI, leftSibI, dist) => {\n  const curSubtree = w.children[curSubtreeI];\n  const n = curSubtreeI - leftSibI;\n  // Are there intermediate children?\n  if (n > 1) {\n    const delta = dist / n;\n    w.children[leftSibI + 1].shift += delta;\n    curSubtree.shift -= delta;\n    curSubtree.change -= dist - delta;\n  }\n};\n\nconst nextLContour = w => {\n  return w.hasChildren ? w.firstChild : w.lThr;\n};\n\nconst nextRContour = w => {\n  return w.hasChildren ? w.lastChild : w.rThr;\n};\n\nconst setLThr = (w, i, lContour, lSumMods) => {\n  const firstChild = w.firstChild;\n  const lExt = firstChild.lExt;\n  const curSubtree = w.children[i];\n  lExt.lThr = lContour;\n  // Change relX so that the sum of modifier after following thread is correct.\n  const diff = lSumMods - lContour.relX - firstChild.lExtRelX;\n  lExt.relX += diff;\n  // Change preliminary x coordinate so that the node does not move.\n  lExt.prelim -= diff;\n  // Update extreme node and its sum of modifiers.\n  firstChild.lExt = curSubtree.lExt;\n  firstChild.lExtRelX = curSubtree.lExtRelX;\n};\n\n// Mirror image of setLThr.\nconst setRThr = (w, i, rContour, rSumMods) => {\n  const curSubtree = w.children[i];\n  const rExt = curSubtree.rExt;\n  const lSib = w.children[i - 1];\n  rExt.rThr = rContour;\n  const diff = rSumMods - rContour.relX - curSubtree.rExtRelX;\n  rExt.relX += diff;\n  rExt.prelim -= diff;\n  curSubtree.rExt = lSib.rExt;\n  curSubtree.rExtRelX = lSib.rExtRelX;\n};\n\n// Position root between children, taking into account their modifiers\nconst positionRoot = w => {\n  if (w.hasChildren) {\n    const k0 = w.firstChild;\n    const kf = w.lastChild;\n    const prelim = (k0.prelim + k0.relX - k0.xSize / 2 +\n      kf.relX + kf.prelim + kf.xSize / 2 ) / 2;\n    Object.assign(w, {\n      prelim,\n      lExt: k0.lExt, lExtRelX: k0.lExtRelX,\n      rExt: kf.rExt, rExtRelX: kf.rExtRelX,\n    });\n  }\n};\n\n// Make/maintain a linked list of the indexes of left siblings and their\n// lowest vertical coordinate.\nconst updateLows = (lowY, index, lastLows) => {\n  // Remove siblings that are hidden by the new subtree.\n  while (lastLows !== null && lowY >= lastLows.lowY)\n    lastLows = lastLows.next;\n  // Prepend the new subtree.\n  return {\n    lowY,\n    index,\n    next: lastLows,\n  };\n};\n"],"names":["count","node","sum","children","i","length","value","hierarchy","data","child","childs","n","root","Node","valued","nodes","defaultChildren","pop","Array","push","parent","depth","eachBefore","computeHeight","d","copyData","height","this","prototype","constructor","eachAfter","each","callback","current","next","reverse","sort","compare","path","end","start","ancestor","a","b","aNodes","ancestors","bNodes","c","leastCommonAncestor","k","splice","descendants","leaves","links","source","target","copy","version","packageInfo","defaults","Object","freeze","size","flextree","options","opts","assign","accessor","name","opt","layout","tree","FlexNode","nodeSize","spacing","wtree","wrap","getFlexNode","y","prelim","shift","change","lExtRelX","lThr","rExtRelX","rThr","oNode","x","v","update","ySize","xSize","ancs","hasChildren","noChildren","numChildren","reduce","acc","kid","maxExtents","extents","nodeExtents","top","bottom","left","right","e0","e1","Math","min","max","FlexClass","treeData","_wrap","kidsData","map","kd","hl","arg","arguments","kids","_dump","i1","i0","i2","kdumps","join","layoutChildren","w","lastLows","lowY","lExt","rExt","separate","updateLows","resolveX","prevSum","parentX","relX","forEach","shiftChange","lastShiftSum","lastChangeSum","shiftSum","changeSum","lows","lSib","curSubtree","rContour","rSumMods","lContour","lSumMods","isFirst","dist","index","rightBottom","leftBottom","nextRContour","nextLContour","setLThr","setRThr","moveSubtree","subtree","distance","distributeExtra","curSubtreeI","leftSibI","delta","firstChild","lastChild","diff","positionRoot","k0","kf"],"mappings":"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"}